compose:
* Function composition.  Feeds its input to the last function in its argument
* list, then feeds that function's output to the second-to-last, and so on,
* eventually returning the output of the last function in the list as the 
* combined function's output.
*
* compose{ f, g } : x = f : (g : x)

construct:
* Sequence construction.  Feeds its input to each of its argument functions,
* and generate a sequence where each element is the output of one of the 
* argument functions.
*
* construct{ f, g } : x  = < f : x, g : x >

if:
* Conditional form.  Accepts exactly three arguments.  First feeds its input 
* to the first argument.  If the result is boolean True, it feeds the input to
* its second argument, if False then it feeds it to its third argument, 
* otherwise it just returns Bottom.
*
* if{ f, g, h } : x = if f : x then g : x else h : x

