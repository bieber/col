*:
* Basic multiplication function.
* Input - A sequence of numbers, integer or floating point.
* Output - The product of the input numbers, floating point if any of the 
* inputs were floating point.

+:
* Basic addition function.
* Input - A sequence of numbers, integer or floating point.
* Output - The sum of the input numbers, floating point if any of the input 
* numbers was floating point, integer otherwise.

-:
* Basic subtraction function.
* Input - A sequence of numbers, integer or floating point.
* Output - The difference of each of the numbers, starting with the first 
* value and subtracting each successive value in order.  Result is floating 
* point if any of the input numbers are floating point.

/:
* Basic division function.
* Input - A sequence of numbers, integer or floating point.
* Output - The quotient of each of the numbers, starting with the first 
* value and subtracting each successive value in order.  Result is a floating 
* point number.

const:
* Constant function.
* Specializers - const(n)
* Input - Any value other than bottom.
* Output - The value n.

eq:
* Comparison function.
* Input - A sequence of two or more values.
* Output - True if all values in the sequence are equivalent, False if they are
* not, or bottom for invalid input.

float:
* Floating point conversion function.
* Input - Any value other than bottom.
* Output - A conversion of the input value to a floating point number.  
* Integers are simply cast to floating point, floating point numbers are 
* passed through verbatim.  True becomes 1.0, False becomes 0.0.  Chars are 
* converted to their ASCII values and then cast to floating point.  Strings 
* are converted with the C atof funciton.  Sequences simply return the 
* sequence length.

id:
* Identity function.
* Input - Any value.
* Output - The same value as the input.

int:
* Integer conversion function.
* Input - Any value other than bottom.
* Output - A conversion of the input value to an integer.  Floats are 
* truncated, integers are passed through verbatim.  True becomes 1, False 
* becomes 0.  Chars are converted to their ASCII values.  Strings are 
* converted with the C atoi function.  Sequences simply return the sequence 
* length.

mod:
* Modulus operation.
* Input - A sequence of two or more integers.
* Output - The result of applying the modulus operator (remainder of division)
* between the first and second value, then between that result and the third
* value, and so on.

