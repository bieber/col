#!/usr/bin/env colint

 ##
 #  Copyright 2012, Robert Bieber
 #
 #  This file is part of col.
 #
 #  col is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  col is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with col.  If not, see <http://www.gnu.org/licenses/>.
 #
 ##

###
## This program expects a single command-line argument, an integer
## It then generates and prints to the screen the collatz sequence starting 
## with that number.  The next element of the sequence is generated by dividing
## by two if the current number is even, or multiplying by three and adding one 
## if it is odd.
###

# Executes five functions in order on the input (command-line arguments)
# head: Takes the first element of the sequence, or the first command-line arg
# int: Converts the string to an integer
# collatz-seq: Generates the collatz sequence beginning with that number
# map{ str }: Applies the str function to each element of the sequence, 
#              converting the integers to strings.
# print-list: Prints the list to the screen.

main = compose{ print-list, map{ str }, collatz-seq, int, head }

# The construct form creates a sequence with two elements, one is the number 0
# and the other is the result of calling the mod function on the sequence 
# containing the input value and the constant 2.  This will yield a list of 
# the form < 0, n % 2 > for input value n.  It then calls the eq function on 
# that sequence.  The entire function will return True for even inputs, False
# for odd.

even = 
compose{
  eq,
  construct{ const(0), compose{ mod, construct{ id, const(2) }}}}

# Similar to the even function, but simpler: just compares its input to 1

eq1 = compose{ gte, construct{ const(1), id }}

# Transforms an integer into the next element in a collatz sequence.  If the 
# input is even it returns the result of dividing by 2, if odd it returns the 
# result of multiplying by 3 and adding 1

collatz-step = 
if{ 
  even, 
  compose{ /, construct{ id, const(2) }},
  compose{ 1+, compose{ *, construct{ id, const(3) }}}}

# Given the starting element of a collatz sequence, generates the entire 
# sequence that follows from it.  It operates by recursively calling 
# collatz-seq with the next element in the series and prepending the input onto
# that list, until it finally terminates with base-case of 1

collatz-seq =
if{
  eq1,
  const(<1>),
  compose{ prepend, construct{ id, compose{ collatz-seq, collatz-step }}}}

# Prints the first element of a list, and then calls print-rest to print the 
# remaining elements

print-list =
compose{ 
  println, const(""), 
  print-rest, head, construct{ tail, 
                               compose{ print, head }}}

# Prints all the elements of a list with a preceding ", "

print-rest = map{ construct{ compose{ print, const(", ") }, print}}

